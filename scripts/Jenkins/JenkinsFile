node {
    def goHome = tool('Go 1.13.7')

    // ws("${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_ID}/src/github.com/rohan-luthra/microservice-grpc-go/service-restaurants-go") {
    //     withEnv(["GOROOT=${goHome}", "GOPATH=${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_ID}", "PATH+GO=${goHome}/bin"]) {

    ws("${JENKINS_HOME}/workspace/${JOB_NAME}/src/github.com/rohan-luthra/microservice-grpc-go/service-restaurants-go") {
    withEnv(["GOROOT=${goHome}", "GOPATH=${JENKINS_HOME}/workspace/${JOB_NAME}", "PATH+GO=${goHome}/bin"]) {

            stage('Checkout'){
                echo 'Checking out SCM'
                checkout scm

                withCredentials([file(credentialsId: 'MICRO_CONGIF_YAML', variable: 'config'),  
                    file(credentialsId: 'MICRO_CONFIG_YAML_TEST', variable: 'config_test')]) {
                        
                    sh "cp \$config config.yml"
                    sh "cp \$config_test config_test.yml"
                }
            }

            
            stage('Setting Up Project'){
                echo 'Pulling Dependencies'

                sh 'go version'
                sh 'go get -u github.com/golang/dep/cmd/dep'
                sh 'go get -u golang.org/x/lint/golint'
                // sh 'go get -u github.com/golang/lint/golint'
        
                //or -update
                sh '$GOPATH/bin/dep ensure -vendor-only -v'  
            }

            stage('Test'){

                echo "Skiping linting"
                // sh 'go lint src/*'

                echo "Testing"
                sh 'go test ./test -v'
            }

            stage('Dokcer Build'){


                withCredentials([string(credentialsId: 'GITHUB_DEVELOPER_TOKEN', variable: 'token')]) {
                    sh 'chmod +x ./docker-push.sh'
                    sh './docker-push.sh'
                    sh '''
                    SERVICE_NAME=restaurants
                    REPO="docker.pkg.github.com/rohan-luthra/service-$SERVICE_NAME-docker/service-$SERVICE_NAME"

                    COMMIT=$CODEBUILD_RESOLVED_SOURCE_VERSION
                    if [[ -z "$COMMIT" ]]; then
                    COMMIT=$(git log -1 --format=%H)
                    fi
                    COMMIT=${COMMIT::8}

                    DOCKER_HOST="docker.pkg.github.com"

                    ACCOUNT_SVC_PROFILE="development"

                    if [[ "$ACCOUNT_SVC_PROFILE" == "development" ]]; then
                    TAG="dev"
                    elif [[ "$ACCOUNT_SVC_PROFILE" == "testing" ]]; then
                    TAG="test"
                    elif [[ "$ACCOUNT_SVC_PROFILE" == "production" ]]; then
                    TAG="prod"
                    elif [[ "$ACCOUNT_SVC_PROFILE" == "staging" ]]; then
                    TAG="stag"
                    fi

                    echo $TAG
                    echo $COMMIT

                    echo "Creating version.json..."
                    echo "{
                    \"commit\": \"$COMMIT\",
                    \"image\": \"$TAG\"
                    }" > ./scripts/version.json

                    echo "Building docker image..."
                    docker build -f scripts/docker/Dockerfile -t $REPO:$COMMIT .
                    docker tag $REPO:$COMMIT $REPO:$TAG
                
                    echo "Logging in"
                    $token | docker login docker.pkg.github.com -u "rohan-luthra" --password-stdin
                    echo "Pushing docker"
                    docker push $REPO:$TAG
                    echo "Successfully pushed docker image"
                    '''
                }

            }

        }
    }
    
}